class Solution {
    public int trap(int[] height) {
        // The length of the given height array.
        int length = height.length;

        // Arrays to store the maximum height to the left and right of every bar.
        int[] maxLeft = new int[length];
        int[] maxRight = new int[length];

        // Initialize the first element of maxLeft with the first height
        // as there's nothing to the left of it.
        maxLeft[0] = height[0];
        // Initialize the last element of maxRight with the last height
        // as there's nothing to the right of it.
        maxRight[length - 1] = height[length - 1];

        // Populate the maxLeft array by finding the maximum height to the left
        // of the current position, including itself.
        for (int i = 1; i < length; ++i) {
            maxLeft[i] = Math.max(maxLeft[i - 1], height[i]);
        }

        // Populate the maxRight array by finding the maximum height to the right
        // of the current position, including itself. This loop runs backwards.
        for (int i = length - 2; i >= 0; --i) {
            maxRight[i] = Math.max(maxRight[i + 1], height[i]);
        }

        // Variable to store the total amount of trapped water.
        int totalWater = 0;

        // Calculate the trapped water at each position by finding the
        // minimum of maxLeft and maxRight at that position (which is the maximum
        // water level the position can hold) and subtracting the height of the bar.
        for (int i = 0; i < length; ++i) {
            totalWater += Math.min(maxLeft[i], maxRight[i]) - height[i];
        }

        // Return the total trapped water.
        return totalWater;
    }
}
