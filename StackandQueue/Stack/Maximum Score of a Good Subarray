class Solution {
    public int maximumScore(int[] nums, int k) {
        int length = nums.length;
        int[] left = new int[length];

        int[] right = new int[length];

        Arrays.fill(left, -1);
        Arrays.fill(right, length);

        Deque<Integer> stack = new ArrayDeque<>();

        for (int i = 0; i < length; ++i) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            }
            stack.push(i);
        }

        stack.clear();

        for (int i = length - 1; i >= 0; --i) {
            while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            }
            stack.push(i);
        }

        int maxScore = 0;

        for (int i = 0; i < length; ++i) {

            if (left[i] + 1 <= k && k <= right[i] - 1) {

                maxScore = Math.max(maxScore, nums[i] * (right[i] - left[i] - 1));
            }
        }
      
        return maxScore;
    }
}
